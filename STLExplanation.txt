C++ Standard Template Library
In C++, the Standard Template Library (STL) provides a set of programming tools to implement algorithms and data structures like vectors, lists, queues, etc.

STL implements these data structures and algorithms using general-purpose classes and functions that have been tested rigorously.

C++ STL has 3 major components:

Containers
Iterators
Algorithms
In addition to these, STL also provides several other features, including function objects, smart pointers, and exception handling mechanisms.

C++ STL Containers
STL containers store data and organize them in a specific manner as required.

For example, vectors store data of the same type in a sequential order. Whereas, maps store data in key-value pairs.




We can classify STL containers into 3 types:
1. Sequence containers:

Array
Vector
Queue
Deque
Forward_list
List
2. Associative containers:

Set
Multiset
Map
Multimap
3. Unordered associative containers:

Unordered_set
Unordered_multiset
Unordered_map
Unordered_multimap



Types of STL Container in C++
In C++, there are generally 3 kinds of STL containers:

Sequential Containers
Associative Containers
Unordered Associative Containers

1. Sequential Containers in C++
In C++, sequential containers allow us to store elements that can be accessed in sequential order.

Internally, sequential containers are implemented as arrays or linked lists data structures.

Types of Sequential Containers

Array
Vector
Deque
List
Forward List


C++ Queue
In C++, the STL queue provides the functionality of a queue data structure.

The queue data structure follows the FIFO (First In First Out) principle where elements that are added first will be removed first.

In C++, the STL deque is a sequential container that provides the functionality of a double-ended queue data structure.

In a regular queue, elements are added from the rear and removed from the front. However, in a deque, we can insert and remove elements from both the front and rear.

Types of Deque
Input Restricted Deque
In this deque, input is restricted at a single end but allows deletion at both the ends.
Output Restricted Deque
In this deque, output is restricted at a single end but allows insertion at both the ends.

Priority Queue
A priority queue is a special type of queue in which each element is associated with a priority 
and is served according to its priority. If elements with the same priority occur, 
they are served according to their order in the queue.

Before the learning the Priority Queue there are some benefit to look at heap topic

Heap Data Structure
Heap data structure is a complete binary tree that 
satisfies the heap property, where any given node is

always greater than its child node/s and 
the key of the root node is the largest among all other nodes. 
This property is also called max heap property.
always smaller than the child node/s and 
the key of the root node is the smallest among all other nodes. 
This property is also called min heap property.

Heap Operations
Some of the important operations performed on a 
heap are described below along with their algorithms.

Heapify
Heapify is the process of creating a heap data structure 
from a binary tree. It is used to create a Min-Heap or a Max-Heap.

Algorithm

Heapify(array, size, i)
  set i as largest
  leftChild = 2i + 1
  rightChild = 2i + 2
  
  if leftChild > array[largest]
    set leftChildIndex as largest
  if rightChild > array[largest]
    set rightChildIndex as largest

  swap array[i] and array[largest]
To create a Max-Heap:

MaxHeap(array, size)
  loop from the first index of non-leaf node down to zero
    call heapify

    Insert Element into Heap
Algorithm for insertion in Max Heap

If there is no node, 
  create a newNode.
else (a node is already present)
  insert the newNode at the end (last node from left to right.)
  
heapify the array

Delete Element from Heap
Algorithm for deletion in Max Heap

If nodeToBeDeleted is the leafNode
  remove the node
Else swap nodeToBeDeleted with the lastLeafNode
  remove noteToBeDeleted
   
heapify the array

Peek (Find max/min)
Peek operation returns the maximum element 
from Max Heap or minimum element 
from Min Heap without deleting the node.

For both Max heap and Min Heap

return rootNode
Extract-Max/Min
Extract-Max returns the node with maximum value 
after removing it from a Max Heap whereas 
Extract-Min returns the node with minimum 
after removing it from Min Heap.